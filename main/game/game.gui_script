function game_screen(self)
	
	for i,v in ipairs(self.screens) do
		if v.screen == self.current_screen_loaded then
			gui.set_enabled(gui.get_node(v.node), true)
		else
			gui.set_enabled(gui.get_node(v.node), false)
		end
	end
end
local function load_highscore()
	local filename = sys.get_save_file("sys_save_load", "highscore") -- <1>
	local data = sys.load(filename) -- <2>
	return data.highscore or 0  -- <3>
end

local function save_highscore(highscore)
	local filename = sys.get_save_file("sys_save_load", "highscore")
	sys.save(filename, { highscore = highscore })  -- <4>
end

function init(self)
	
	msg.post('.','acquire_input_focus')
	print('yes')
	self.screens = {
		{node = 'question 1', screen = 1,answer = 2},
		{node = 'answer1' , screen = 1, answer = 0},
		{node = 'answer2' , screen = 1, answer = 1},
		{node = 'answer3' , screen = 1, answer = 0},
		{node = 'picture1', screen = 1, answer = 2},
		
	}
	self.current_screen_loaded = 1
	game_screen(self)
	self.score = 0
	self.multiplier = 0
	self.correct = 0
	self.attempts = 0
	self.high_score = load_highscore()
	gui.set_text(gui.get_node('score'),'Score: ' .. self.score)
	gui.set_text(gui.get_node('multiplier'),'Multiplier: ' .. self.multiplier)
	gui.set_text(gui.get_node('correct'),'Answers Correct: ' .. self.correct .. '/'.. self.attempts)
	gui.set_text(gui.get_node('highscore'), 'High Score:' .. self.high_score )
end

function final(self)
	msg.post('.', 'release_input_focus')
	if self.score > self.high_score then
		self.high_score = save_highscore(self.score)
	end
end

function update(self, dt)
	
end

function on_message(self, message_id, message, sender)
	
end
function hover(name_of_node,colour_being_set,size_being_set)
	-- applies menu animations to a node 
	gui.animate(gui.get_node(name_of_node),gui.PROP_COLOR, colour_being_set,gui.EASING_LINEAR,0.05)
	gui.animate(gui.get_node(name_of_node),gui.PROP_SCALE, size_being_set,gui.EASING_LINEAR,0.1)

end

function on_input(self, action_id, action)
	function touching_node(name_of_node)
		return gui.pick_node(gui.get_node(name_of_node), action.x, action.y)
	end
	if touching_node('Back') then
		if action.pressed then

			msg.post("main:/controller", 'show main')
		else
			hover('Back',vmath.vector4(0.5,0.5,0.5,0.5), vmath.vector3(0.375,0.375,1))
		end
	else
		if gui.get_color(gui.get_node('Back')) == vmath.vector4(0.5,0.5,0.5,0.5) then
			hover('Back',vmath.vector4(1,1,1,1), vmath.vector3(0.25,0.25,1))
		end
	end
	if action_id == hash('esc') then
		msg.post("main:/controller", 'show main')
	end
	for i,v in ipairs(self.screens) do
		if touching_node(v.node)  then
			print('yes')
			if v.answer == 1 then
				if action.pressed then
					self.correct = self.correct + 1
					self.attempts = self.attempts + 1
					gui.set_text(gui.get_node('correct'),'Answers Correct: ' .. self.correct .. '/'.. self.attempts)
					self.multiplier = self.multiplier + 1
					self.score = self.score +(self.multiplier *500)
					gui.set_text(gui.get_node('score'),'Score: ' .. self.score)
					gui.set_text(gui.get_node('multiplier'),'Multiplier: ' .. self.multiplier)
					self.current_screen_loaded = self.current_screen_loaded +1
					game_screen(self)
					
				else
					hover(v.node,vmath.vector4(0.5,0.5,0.5,0.5), vmath.vector3(0.75,0.75,1))
				end

			elseif v.answer == 0 then
				if action.pressed then
					if self.score >= 500 then
						self.score = self.score -500
					end
					self.attempts = self.attempts + 1
					gui.set_text(gui.get_node('correct'),'Answers Correct: ' .. self.correct .. '/'.. self.attempts)
					self.multiplier = 0
					gui.set_text(gui.get_node('multiplier'),'Multiplier: ' .. self.multiplier)
					print('wrong')
				else
					hover(v.node,vmath.vector4(0.5,0.5,0.5,0.5), vmath.vector3(0.75,0.75,1))
				end
			end
			
		
				
			
		
		else
			if gui.get_color(gui.get_node(v.node)) == vmath.vector4(0.5,0.5,0.5,0.5) then
				hover(v.node,vmath.vector4(1,1,1,1), vmath.vector3(0.5,0.5,1))
			end

		end
	end													
	
	
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
