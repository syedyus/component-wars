function player2_start(self)
	if math.fmod(self.turn,2) == 0 then
		self.player_turn = 1
		
	else
		self.player_turn = 2
		
	end
	self.phase = 1
	gui.set_text(gui.get_node('phase'), 'Coin Phase')
	gui.set_text(gui.get_node('turn'),'Player '.. self.player_turn .."'s turn")
end
function hover(name_of_node,colour_being_set)
	-- applies menu animations to a node 
	gui.animate(gui.get_node(name_of_node),gui.PROP_COLOR, colour_being_set,gui.EASING_LINEAR,0.05)
	

end
function player1_start(self)
	
	if math.fmod(self.turn,2) == 0 then
		self.player_turn = 2
	else
		self.player_turn = 1
	end
	self.phase = 1
	gui.set_text(gui.get_node('phase'), 'Coin Phase')
	gui.set_text(gui.get_node('turn'),'Player '.. self.player_turn.. "'s turn")
end
	

function init(self)
	gui.set_color(gui.get_node('reminder_crypto'), vmath.vector4(1,1,1,0)) 
	gui.set_color(gui.get_node('reminder_turn'), vmath.vector4(1,1,1,0)) 
	msg.post('.','acquire_input_focus')
	gui.set_enabled(gui.get_node('reminder_crypto'), false)
	gui.set_enabled(gui.get_node('crypto_options'), false)
	self.turn = 1 
	self.phase = 1 -- self.phase can have two values 1 being the coin phase and 2 being the card phase
	self.crypto = {
		{  1,  0 ,0, 0, 0,0},
		{2, 0 , 0, 0, 0,0},
	}
	self.nodes = {'bitcoin','etherium','solana','lightcoin','tether'}
	
	self.crypto_selected = 0
	self.deck = {}
	self.field = {}
	
	math.randomseed(os.time())
	self.start = math.random(0,1)
	if self.start == 0 then
		player1_start(self)
		
	else
		player2_start(self)
	end
		
end

function final(self)
	msg.post('.', 'release_input_focus')
end

function update(self, dt)
	
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == hash('esc') then
		msg.post('main:/controller', "show main")
	end	
	
	function touching_node(name_of_node)
		return gui.pick_node(gui.get_node(name_of_node), action.x, action.y)
	end
	if self.phase == 1  then 
		if touching_node('crypto')  then
			if action.pressed then
				
				if gui.is_enabled(gui.get_node('crypto_options')) == false then
					gui.set_enabled(gui.get_node('crypto_options'), true)
					gui.set_enabled(gui.get_node('reminder_turn'), false)
					
				else
					gui.set_enabled(gui.get_node('crypto_options'), false)
					gui.set_enabled(gui.get_node('reminder_turn'), true)
				end
					
			else
				hover('crypto',vmath.vector4(1,1,1,0.5))
			end
		elseif touching_node('confirm') and action.pressed  then
			if self.crypto_selected == 3 then
				gui.set_enabled(gui.get_node('crypto_options'), false)
				gui.set_enabled(gui.get_node('reminder_crypto'), false)
				self.crypto_selected = 0
				gui.set_text(gui.get_node('phase'),'Card Phase')
				self.phase = 2

			
			elseif self.crypto_selected <3 and gui.get_color(gui.get_node('reminder_crypto')) == vmath.vector4(1,1,1,0)   then
				gui.set_enabled(gui.get_node('reminder_crypto'), true)
				gui.set_color(gui.get_node('reminder_crypto'), vmath.vector4(1,1,1,1))
				gui.animate(gui.get_node('reminder_crypto'), gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_LINEAR, 2.5)
			
			end
		elseif touching_node('end turn') and gui.get_color(gui.get_node('reminder_turn')) == vmath.vector4(1,1,1,0) and action.pressed  then
			gui.set_enabled(gui.get_node('reminder_turn'), true)
			gui.set_color(gui.get_node('reminder_turn'), vmath.vector4(1,1,1,1))
			gui.animate(gui.get_node('reminder_turn'), gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_LINEAR, 2.5)
		end
		if gui.get_color(gui.get_node('crypto')) ==	vmath.vector4(1,1,1,0.5) and not touching_node('crypto')  then
			hover('crypto',vmath.vector4(1,1,1,1))
		end
			
	end
	for i,v in ipairs(self.crypto) do	 	
		for j = 1, #self.nodes,1 do
			if self.player_turn == v[1] then
				gui.set_text(gui.get_node(self.nodes[j]),v[j+1])
			end			
			if self.player_turn == v[1] then
				if touching_node(self.nodes[j].. ' up') and self.crypto_selected < 3 then	
					if action.pressed then
						self.crypto_selected = self.crypto_selected +1
						v[j+1] = v[j+1] + 1
						print(self.crypto_selected)	
						gui.set_text(gui.get_node(self.nodes[j]),v[j+1])
						else
							print('yes')
							hover(self.nodes[j] .. ' up',vmath.vector4(0.5,0.5,0.5,0.5))
						end
				elseif touching_node(self.nodes[j].. ' down')  and self.crypto_selected > 0  and v[j+1] ~= 0 then
					if action.pressed then
							
						self.crypto_selected = self.crypto_selected -1 
						v[j+1] = v[j+1] -1
						print(self.crypto_selected)
						gui.set_text(gui.get_node(self.nodes[j]),v[j+1])
					else

						print('yes')
						hover(self.nodes[j] .. ' down',vmath.vector4(0.5,0.5,0.5,0.5))

						
					end
				end
			end
		end
	end
					
	for i = 1,#self.nodes do

		if gui.get_color(gui.get_node(self.nodes[i].. ' up')) == vmath.vector4(0.5,0.5,0.5,0.5)  then
			hover(self.nodes[i] .. ' up',vmath.vector4(1,1,1,1))

		elseif gui.get_color(gui.get_node(self.nodes[i].. ' down')) == vmath.vector4(0.5,0.5,0.5,0.5)  then
			hover(self.nodes[i] .. ' down',vmath.vector4(1,1,1,1))
		end
	end
	if touching_node('end turn') and self.phase == 2 and action.pressed  then
		
		
		self.turn = self.turn +1
		
		if self.start == 0 then
			
			player1_start(self)
		else
		
			player2_start(self)
		end
	end
		
		 	
		 
			
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
