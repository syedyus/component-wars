function help_screen(self)
	for i,v in ipairs(self.help_screens) do
		if v.screen == self.current_node_loaded then
			gui.set_enabled(gui.get_node(v.node), true)
		else
			gui.set_enabled(gui.get_node(v.node), false)
		end
	end
end
function hover(name_of_node,colour_being_set,size_being_set)
	-- applies menu animations to a node 
	gui.animate(gui.get_node(name_of_node),gui.PROP_COLOR, colour_being_set,gui.EASING_LINEAR,0.05)
	gui.animate(gui.get_node(name_of_node),gui.PROP_SCALE, size_being_set,gui.EASING_LINEAR,0.1)

end
-- allows me to use another animation for hovering and it returning to normal
function return_hover(name_of_node,colour_being_set,size_being_set)
	gui.animate(gui.get_node(name_of_node),gui.PROP_COLOR, colour_being_set,gui.EASING_LINEAR,0.05)
	gui.animate(gui.get_node(name_of_node),gui.PROP_SCALE, size_being_set,gui.EASING_LINEAR,0.1)

end

function init(self)
	
	msg.post('.','acquire_input_focus')
	self.table = {
		{node = 'back', colour = vmath.vector4(0.9,0.5,0.5,1)},
		{node = 'next', colour = vmath.vector4(0.5,0.9,0.5,1)},
		
	}
	self.help_screens = {
		{node = 'help1',screen = 1},
		{node = 'help2', screen = 2},
		{node = 'help3', screen =3 },
	}
	
	self.current_node_loaded =1
	print(self.current_node_loaded)
	for i,v in ipairs(self.help_screens) do 
		gui.set_enabled(gui.get_node(v.node), false)
	end
	
	
	help_screen(self)
end

function final(self)
	
end

function update(self, dt)
	
end

function on_message(self, message_id, message, sender)
	
end


function on_input(self, action_id, action)
	function touching_node(name_of_node)
		return gui.pick_node(gui.get_node(name_of_node), action.x, action.y)
	end
	
	for i,v in ipairs(self.table) do
		
		if touching_node(v.node) and action.pressed then
			
			print('yes')
			if v.node == 'back' and self.current_node_loaded > 1 then
				print('yes')
				
				self.current_node_loaded= self.current_node_loaded -1
				help_screen(self)

			elseif v.node == 'next'  and self.current_node_loaded < #self.help_screens   then
				
				self.current_node_loaded = self.current_node_loaded +1
				help_screen(self)
			end
			print(self.current_node_loaded)
		end
	end
				
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
