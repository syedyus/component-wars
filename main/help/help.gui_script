function help_screen(self)
	gui.set_text(gui.get_node('Page'),'Page:' .. self.current_node_loaded .. '/' .. self.help_screen_size )
	for i,v in ipairs(self.help_screens) do
		if v.screen == self.current_node_loaded then
			gui.set_enabled(gui.get_node(v.node), true)
		else
			gui.set_enabled(gui.get_node(v.node), false)
		end
	end
end


function init(self)
	sound.play('/help#bgm')
	msg.post('.','acquire_input_focus')
	self.table = {
		{node = 'back', colour = vmath.vector4(0.9,0.5,0.5,1)},
		{node = 'next', colour = vmath.vector4(0.5,0.9,0.5,1)},
		{node = 'exit', colour = vmath.vector4(0.42069,0.69,69,1)},
		
		
	}
	self.help_screens = {
		{node = 'help1',screen = 1},
		{node = 'help2', screen = 2},
		{node = 'help3', screen =3},
	}
	self.help_screen_size = 1
	self.current_node_loaded =1
	print(self.current_node_loaded)
	for i,v in ipairs(self.help_screens) do 
		
		gui.set_enabled(gui.get_node(v.node), false)
		print(self.help_screen_size)
		if v.screen > self.help_screen_size then
			self.help_screen_size = v.screen
		end
	end
	gui.set_text(gui.get_node('Page'),'Page:' .. self.current_node_loaded .. '/' .. self.help_screen_size )
	help_screen(self)
	
	
end

function final(self)
	
end

function update(self, dt)
	
end

function on_message(self, message_id, message, sender)
	
end


function on_input(self, action_id, action)
	function hover(name_of_node,colour_being_set,size_being_set)
		-- applies menu animations to a node 
		gui.animate(gui.get_node(name_of_node),gui.PROP_COLOR, colour_being_set,gui.EASING_LINEAR,0.05)
		gui.animate(gui.get_node(name_of_node),gui.PROP_SCALE, size_being_set,gui.EASING_LINEAR,0.1)

	end
	-- allows me to use another animation for hovering and it returning to normal
	function return_hover(name_of_node,colour_being_set,size_being_set)
		gui.animate(gui.get_node(name_of_node),gui.PROP_COLOR, colour_being_set,gui.EASING_LINEAR,0.05)
		gui.animate(gui.get_node(name_of_node),gui.PROP_SCALE, size_being_set,gui.EASING_LINEAR,0.1)

	end
	
	function touching_node(name_of_node)
		return gui.pick_node(gui.get_node(name_of_node), action.x, action.y)
	end
	for i,v in ipairs(self.table) do
		if touching_node(v.node) then
			if v.node == 'back' then
				if action.pressed and self.current_node_loaded > 1  then
					self.current_node_loaded = self.current_node_loaded -1
					
					
					help_screen(self)
				else
					if self.current_node_loaded > 1  then
						
						hover('back',v.colour,vmath.vector3(0.375,0.375,1))

					elseif self.current_node_loaded == 1 and gui.get_color(gui.get_node(v.node)) == v.colour then 
						print('no')
						hover('back',vmath.vector3(1,1,1),vmath.vector3(0.25,0.25,1))
					end
				end
			elseif v.node == 'next' then
				if self.current_node_loaded < self.help_screen_size and action.pressed then
					self.current_node_loaded = self.current_node_loaded +1
					
					help_screen(self)
				else
					if self.current_node_loaded < self.help_screen_size  then
						
						
						hover('next',v.colour,vmath.vector3(0.375,0.375,1))
					elseif self.current_node_loaded == self.help_screen_size and gui.get_color(gui.get_node(v.node)) == v.colour then
						print('yes')
						hover('next',vmath.vector3(1,1,1),vmath.vector3(0.25,0.25,1))
					end
				end
			elseif v.node == 'exit' then
				if action.pressed then
				msg.post('main:/controller', "show main")
				else
				hover('exit',v.colour,vmath.vector3(0.375,0.375,1))
				end
			end
		else
			if gui.get_color(gui.get_node(v.node)) == v.colour then
				self.count_time = true
				gui.animate(gui.get_node(v.node),gui.PROP_SCALE , vmath.vector3(0.25,0.25,1), gui.EASING_LINEAR, 0.05)
				gui.animate(gui.get_node(v.node),gui.PROP_COLOR,vmath.vector4(1,1,1,1),gui.EASING_INSINE, 0.1) 
			end
			self.count_time = false
		end
		self.timer = 0
	end
	if action_id == hash('esc') then
		msg.post('main:/controller', "show main")
	end	
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
